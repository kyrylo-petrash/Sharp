using static System.Console;
using Short = System.Console;

namespace Class
{
    class MyClass
    {
        // модификаторы доступа к членам класса: public - открытый, privat - доступ ограничен (только в теле класса)
        public string Name { get; set; } // поле класса, переменная в не метода
        public int field;

        public void Method() // метод класса
        {
            Console.WriteLine(field);
        }
    }

    internal class Program // ритуальный класс для входа (метод должен быть в классе), чистый процедурный стиль (до 9-й версии)
    {
        // чистое ООП начинается с процедурного программирования
        static void Main(string[] args) // главные метод, точка входа в программу
        {
            // класс - конструкции программы, объект - класс в ОЗУ
            // компиляция, появляется exe файл, потом машинный код, а после ОЗУ

            // экземпляр - область памяти на управляемой куче, в которой располагаются -> поля
            // объект - область памяти на управляемой куче, в которой располагаются -> методы

            MyClass a = new MyClass(); // heap из ОЗУ, a - экземпляр класса, для создания объекта, MyClass() - конструктор класса
                                       // инстанцируем класс MyClass (т.е. экземплируем)

            MyClass b = new MyClass(); // ещё одна неуправляемая куча

            // точка - оператор доступа к членам объекта

            Console.WriteLine(a.Equals(b));

            a.field = 1;
            b.field = 2;

            Console.WriteLine(a.field);
            Console.WriteLine(b.field);

            a.Method(); // вызываем метод на экземпляре
            b.Method();

            #region UML
            // UML - унифицированный язык моделирования
            // классы - загловки
            // атрибуты - поля
            // методы - операции
            // стрелка - зависимость от источника к целе
            // "acces", где using - импорт класса
            #endregion
        }
    }
}
